# file to store some credentials and mappings in the mean time

wml_credentials = {
  "url": "https://ibm-watson-ml.mybluemix.net",
  "username": "***",
  "password": "***",
  "instance_id": "***"
}


### Student TODO
# need to put all of them here and pickle, or store some other way 
user_map_articles = {'318b21f8e26b4853ffccd68607c95c237684783c': 1075,
 'e4478410e8c735b55166e95f65bb639a99422efc': 686,
 'dea76a127e043c25bc2c272f81c72c1b2509d165': 2103,
 '98ed0c4dbebdf93d866f14e02f463d161d6b267d': 4005,
 '84b5001249c065333dd162007f052de06a120aaa': 3564}


user_map_collabs = {}
collab_name_map = {}

### Student TODO
# Find a more elegant way of handling this
# perhaps just pickle this or put it in a db
# finding the best way for converting the model predictions back to titles

article_map = {
 0.0: 'detect malfunctioning iot sensors with streaming analytics',
 2.0: 'this week in data science (april 18, 2017)',
 4.0: 'analyze ny restaurant data using spark in dsx',
 8.0: 'data science bowl 2017',
 9.0: '3992    using apache spark to predict attack vectors a...\nName: title, dtype: object',
 12.0: 'timeseries data analysis of iot events by using jupyter notebook',
 14.0: 'got zip code data? prep it for analytics. – ibm watson data lab – medium',
 15.0: 'apache spark™ 2.0: extend structured streaming for spark ml',
 16.0: 'higher-order logistic regression for large datasets',
 18.0: 'the greatest public datasets for ai – startup grind',
 20.0: 'working interactively with rstudio and notebooks in dsx',
 25.0: 'creating the data science experience',
 26.0: 'using machine learning to predict parking difficulty',
 28.0: 'deep forest: towards an alternative to deep neural networks',
 29.0: 'experience iot with coursera',
 30.0: 'how open api economy accelerates the growth of big data and analytics',
 32.0: "a kaggler's guide to model stacking in practice",
 33.0: 'using brunel in ipython/jupyter notebooks',
 34.0: 'top 10 machine learning use cases: part 1',
 36.0: 'data visualization playbook: the right level of detail',
 39.0: 'pulling and displaying etf data',
 40.0: 'ensemble learning to improve machine learning results',
 43.0: 'deep learning with tensorflow course by big data university',
 48.0: 'data science experience documentation',
 50.0: 'graph-based machine learning',
 51.0: 'modern machine learning algorithms',
 53.0: 'introducing streams designer',
 54.0: '8 ways to turn data into value with apache spark machine learning',
 57.0: 'transfer learning for flight delay prediction via variational autoencoders',
 58.0: 'advancements in the spark community',
 59.0: '20405    how to tame the valley — hessian-free hacks fo...\nName: title, dtype: object',
 60.0: 'readr 1.0.0',
 62.0: 'data visualization: the importance of excluding unnecessary details',
 64.0: 'predicting gentrification using longitudinal census data',
 65.0: 'interconnect with us',
 68.0: 'an introduction to scientific python (and a bit of the maths behind it) – numpy',
 74.0: 'the 3 kinds of context: machine learning and the art of the frame',
 76.0: 'this week in data science (may 2, 2017)',
 77.0: 'apache spark @scale: a 60 tb+ production use case',
 78.0: 'this week in data science (may 16, 2017)',
 80.0: 'leverage scikit-learn models with core ml',
 81.0: 'transform anything into a vector',
 82.0: 'build a logistic regression model with wml & dsx',
 87.0: 'this week in data science (july 26, 2016)',
 89.0: 'top 20 r machine learning and data science packages',
 92.0: '9 mistakes to avoid when starting your career in data science',
 96.0: 'improving quality of life with spark-empowered machine learning',
 98.0: 'how to map usa rivers using ggplot2',
 100.0: 'use data assets in a project using ibm data catalog',
 101.0: 'how to choose a project to practice data science',
 102.0: 'how to ease the strain as your data volumes rise',
 103.0: 'how to scale your analytics using r',
 107.0: 'when machine learning matters · erik bernhardsson',
 108.0: '520    using notebooks with pixiedust for fast, flexi...\nName: title, dtype: object',
 109.0: 'tensorflow quick tips',
 110.0: 'pixiedust: magic for your python notebook',
 111.0: 'tidy up your jupyter notebooks with scripts',
 112.0: 'building custom machine learning algorithms with apache systemml',
 113.0: 'this week in data science (february 28, 2017)',
 115.0: 'finding the user in data science',
 116.0: 'practical tutorial on random forest and parameter tuning in r',
 117.0: 'apache spark™ 2.0: migrating applications',
 120.0: 'a dynamic duo – inside machine learning – medium',
 122.0: 'watson machine learning for developers',
 124.0: 'python machine learning: scikit-learn tutorial',
 125.0: 'statistics for hackers',
 130.0: "feature importance and why it's important",
 131.0: 'simple graphing with ipython and\xa0pandas',
 132.0: 'collecting data science cheat sheets',
 134.0: 'this week in data science (november 01, 2016)',
 136.0: 'this week in data science (february 7, 2017)',
 138.0: 'best packages for data manipulation in r',
 142.0: 'neural networks for beginners: popular types and applications',
 143.0: '0 to life-changing app: scala first steps and an interview with jakob odersky',
 145.0: '68879    don’t throw more data at the problem! here’s h...\nName: title, dtype: object',
 146.0: 'how to use db2 warehouse on cloud in data science experience notebooks',
 151.0: 'jupyter notebook tutorial',
 152.0: 'how to solve 90% of nlp problems',
 153.0: 'predicting flight cancellations using weather data, part 3',
 157.0: 'data science of variable selection',
 158.0: 'd3heatmap: interactive heat maps',
 162.0: 'an introduction to stock market data analysis with r (part 1)',
 164.0: 'learn tensorflow and deep learning together and now!',
 173.0: '10 must attend data science, ml and ai conferences in 2018',
 176.0: 'top analytics tools in 2016',
 181.0: 'bayesian regularization for #neuralnetworks – autonomous agents\u200a—\u200a#ai',
 183.0: 'data science expert interview: holden karau',
 184.0: 'improving the roi of big data and analytics through leveraging new sources of data',
 188.0: 'foundational methodology for data science',
 189.0: 'common excel tasks demonstrated in\xa0pandas',
 191.0: 'this week in data science (march 28, 2017)',
 193.0: 'spark 2.1 and job monitoring available in dsx',
 194.0: 'data science for real-time streaming analytics',
 195.0: 'artificial intelligence, ethically speaking – inside machine learning – medium',
 202.0: 'analyze open data sets using pandas in a python notebook',
 205.0: "a beginner's guide to variational methods",
 210.0: 'this week in data science (february 14, 2017)',
 213.0: 'modeling energy usage in new york city',
 215.0: 'data wrangling with dplyr and tidyr cheat sheet',
 221.0: 'how smart catalogs can turn the big data flood into an ocean of opportunity',
 223.0: 'using bigdl in dsx for deep learning on spark',
 224.0: 'using apply, sapply, lapply in r',
 225.0: 'a visual explanation of the back propagation algorithm for neural networks',
 230.0: 'web picks (week of 23 january 2017)',
 232.0: 'self-service data preparation with ibm data refinery',
 233.0: 'bayesian nonparametric models – stats and bots',
 234.0: '3 scenarios for machine learning on multicloud',
 236.0: 'improving real-time object detection with yolo',
 237.0: 'deep learning with data science experience',
 239.0: 'getting started with graphframes in apache spark™',
 240.0: 'spark 1.4 for rstudio',
 241.0: 'i am not a data scientist – ibm watson data lab',
 244.0: 'notebooks: a power tool for data scientists',
 250.0: 'building your first machine learning system ',
 251.0: '8170    data science expert interview: dez blanchfield...\nName: title, dtype: object',
 252.0: 'web picks (week of 4 september 2017)',
 253.0: '56594    lifelong (machine) learning: how automation ca...\nName: title, dtype: object',
 254.0: 'apple, ibm add machine learning to partnership with watson-core ml coupling',
 256.0: 'xml2 1.0.0',
 258.0: 'open sourcing 223gb of driving data – udacity inc',
 260.0: 'the machine learning database',
 263.0: "december '16 rstudio tips and tricks",
 266.0: 'developing ibm streams applications with the python api (version 1.6)',
 268.0: 'sector correlations shiny app',
 270.0: 'learning statistics on youtube',
 273.0: 'statistical bias types explained (with examples)',
 277.0: 'work with data connections in dsx',
 278.0: 'deep learning trends and an example',
 283.0: 'twelve\xa0ways to color a map of africa using brunel',
 284.0: 'apache spark 2.0: machine learning. under the hood and over the rainbow.',
 288.0: 'this week in data science (january 31, 2017)',
 291.0: 'a guide to receptive field arithmetic for convolutional neural networks',
 295.0: 'awesome deep learning papers',
 297.0: 'dimensionality reduction algorithms',
 298.0: 'join and enrich data from multiple sources',
 299.0: 'brunel in jupyter',
 302.0: 'accelerate your workflow with dsx',
 303.0: 'backpropagation — how neural networks learn complex behaviors',
 310.0: 'time series prediction using recurrent neural networks (lstms)',
 311.0: 'probabilistic graphical models tutorial\u200a—\u200apart 2 – stats and bots',
 313.0: 'what is machine learning?',
 314.0: 'some random weekend reading',
 315.0: 'neurally embedded emojis',
 316.0: 'leverage python, scikit, and text classification for behavioral profiling',
 319.0: 'using shell scripts to control data flows created in watson applications',
 323.0: 'manage object storage in dsx',
 324.0: 'mycheatsheets.com',
 329.0: 'introduction to market basket analysis in\xa0python',
 330.0: 'brunel: imitation is a sincere form of flattery',
 336.0: 'challenges in deep learning',
 337.0: 'generalization in deep learning',
 339.0: 'get started with streams designer by following this roadmap',
 346.0: 'fighting gerrymandering: using data science to draw fairer congressional districts',
 347.0: 'announcing dsx environments in beta!',
 348.0: 'this week in data science (april 25, 2017)',
 349.0: 'ibm data science experience white paper - sparkr transforming r into a tool for big data analytics',
 350.0: 'collect your own fitbit data with python',
 351.0: 'do i need to learn r?',
 352.0: 'how ibm builds an effective data science team',
 353.0: 'sparklyr — r interface for apache spark',
 355.0: 'run shiny applications in rstudio in dsx',
 356.0: 'deep learning, structure and innate priors',
 359.0: 'optimizing a marketing campaign: moving from predictions to actions',
 362.0: 'dsx: hybrid mode',
 363.0: '66855    migration from ibm bluemix data connect api (a...\nName: title, dtype: object',
 364.0: 'this week in data science (october 18, 2016)',
 366.0: 'clustering: a guide for the perplexed',
 367.0: 'visualising data the node.js way',
 369.0: 'upload data and create data frames in jupyter notebooks',
 373.0: 'working with notebooks in dsx',
 375.0: 'apache systemml',
 376.0: 'ggplot2 2.2.0 coming soon!',
 379.0: 'data structures related to machine learning algorithms',
 381.0: 'a classification problem',
 382.0: 'what is text analytics?',
 383.0: 'an interview with pythonista katharine jarmul',
 384.0: 'continuous learning on watson',
 389.0: 'apache spark™ 2.0: impressive improvements to spark sql',
 390.0: 'introducing ibm watson studio ',
 395.0: 'run dsx notebooks on amazon emr',
 398.0: '51822    using apache spark as a parallel processing fr...\nName: title, dtype: object',
 399.0: 'predicting the 2016 us presidential election',
 400.0: 'read and write data to and from amazon s3 buckets in rstudio',
 404.0: 'persistent changes to spark config in dsx',
 409.0: 'using github for project control in dsx',
 411.0: '0 to life-changing app: new apache systemml api on spark shell',
 412.0: 'adoption of machine learning to software failure prediction',
 415.0: 'using machine learning to predict value of homes on airbnb',
 416.0: 'using the maker palette in the ibm data science experience',
 417.0: 'ibm data catalog overview',
 420.0: 'cache table in apache spark sql',
 422.0: 'brunel 2.0 preview',
 426.0: 'migrating to python 3 with pleasure',
 427.0: 'ibm data catalog is now generally available',
 428.0: 'data science experience demo: modeling energy usage in nyc',
 429.0: 'why relational databases and r?',
 430.0: 'the new builders podcast ep 3: collaboration',
 437.0: 'ibm watson machine learning: get started',
 440.0: 'this week in data science (january 24, 2017)',
 443.0: 'load db2 warehouse on cloud data with apache spark in dsx',
 444.0: 'declarative machine learning',
 446.0: 'what’s new in data refinery?',
 448.0: 'this week in data science (april 11, 2017)',
 455.0: 'make machine learning a reality for your enterprise',
 460.0: 'web picks - dataminingapps',
 462.0: "i'd rather predict basketball games than elections: elastic nba rankings",
 463.0: 'what is spark?',
 464.0: 'use ibm data science experience to detect time series anomalies',
 465.0: 'introduction to neural networks, advantages and applications',
 468.0: 'what is hadoop?',
 470.0: 'what’s new in the streaming analytics service on bluemix',
 473.0: 'intelligent applications - apache spark',
 474.0: 'publish notebooks to github in dsx',
 475.0: 'gradient boosting explained',
 477.0: 'markdown for jupyter notebooks cheatsheet',
 479.0: 'drowning in data sources: how data cataloging could fix your findability problems',
 480.0: 'optimization for deep learning highlights in 2017',
 482.0: 'using deep learning with keras to predict customer churn',
 485.0: 'a moving average trading strategy',
 486.0: 'use spark r to load and analyze data',
 491.0: 'this week in data science (may 23, 2017)',
 492.0: 'web picks by dataminingapps',
 494.0: 'python for loops explained (python for data science basics #5)',
 495.0: 'top 10 machine learning algorithms for beginners',
 499.0: 'let data dictate the visualization',
 500.0: 'the difference between ai, machine learning, and deep learning?',
 502.0: 'this week in data science (august 02, 2016)',
 504.0: 'this week in data science (december 27, 2016)',
 508.0: 'data science in the cloud',
 510.0: 'this week in data science (may 30, 2017)',
 515.0: 'the art of side effects: curing apache spark streaming’s amnesia (part 1/2)',
 517.0: 'shaping data with ibm data refinery',
 521.0: 'learn about data science in world of watson',
 522.0: 'share the (pixiedust) magic – ibm watson data lab – medium',
 524.0: 'data science platforms are on the rise and ibm is leading the way',
 525.0: 'new shiny cheat sheet and video tutorial',
 528.0: '10 tips on using jupyter notebook',
 532.0: 'the two phases of gradient descent in deep learning',
 534.0: 'dplyr 0.5.0',
 542.0: 'getting started with python',
 544.0: 'data visualization with ggplot2 cheat sheet',
 547.0: 'trust in data science',
 553.0: 'which one to choose for your problem',
 555.0: 'build a naive-bayes model with wml & dsx',
 557.0: "let's have some fun with nfl data",
 559.0: 'this week in data science (april 4, 2017)',
 563.0: 'rstudio ide  cheat sheet',
 564.0: 'dt: an r interface to the datatables library',
 566.0: 'the t-distribution: a key statistical concept discovered by a beer brewery',
 567.0: 'you could be looking at it all wrong',
 569.0: 'how can data scientists collaborate to build better business',
 575.0: 'the new builders ep. 13: all the data that’s fit to analyze',
 583.0: 'the million dollar question: where is my data?',
 585.0: 'tidyverse practice: mapping large european cities',
 586.0: 'building a business that combines human experts and data science',
 588.0: 'tidyr 0.6.0',
 593.0: 'upload files to ibm data science experience using the command line',
 599.0: 'random forest interpretation – conditional feature contributions',
 600.0: 'access ibm analytics for apache spark from rstudio',
 606.0: 'web picks (december 2017)',
 607.0: 'recommendation system algorithms – stats and bots',
 609.0: 'simple linear regression? do it the bayesian way',
 610.0: 'back to basics — jupyter notebooks',
 616.0: 'three reasons machine learning models go out of sync',
 617.0: 'pixiedust gets its first community-driven feature in 1.0.4',
 618.0: 'can a.i. be taught to explain itself?',
 622.0: 'htmlwidgets: javascript data visualization for r',
 626.0: 'analyze db2 warehouse on cloud data in rstudio in dsx',
 631.0: 'this week in data science (january 17, 2017)',
 632.0: 'hyperparameter optimization: sven hafeneger',
 634.0: 'working with db2 warehouse on cloud in data science experience',
 636.0: 'one year as a data scientist at stack overflow',
 641.0: 'perform sentiment analysis with lstms, using tensorflow',
 644.0: "h2o with ibm's data science experience (dsx)",
 645.0: 'how to perform a logistic regression in r',
 647.0: 'getting started with apache mahout',
 651.0: 'analyzing streaming data from kafka topics',
 653.0: 'create a connection and add it to a project using ibm data refinery',
 655.0: 'create a project for watson machine learning in dsx',
 656.0: 'deep learning achievements over the past year ',
 658.0: 'automating web analytics through python',
 659.0: 'discover, catalog and govern data with ibm data catalog',
 662.0: 'build deep learning architectures with neural network modeler',
 665.0: 'get social with your notebooks in dsx',
 667.0: 'imitation learning in tensorflow (hopper from openai gym)',
 668.0: 'shiny: a data scientist’s best friend',
 669.0: '70 amazing free data sources you should know',
 670.0: 'calculate moving averages on real time data with streams designer',
 673.0: 'predict chronic kidney disease using spss modeler flows',
 675.0: 'webinar: april 11 - thinking inside the box: you can do that inside a data frame?!',
 677.0: 'package development with devtools  cheat sheet',
 678.0: 'spark sql - rapid performance evolution',
 679.0: 'this week in data science',
 680.0: 'how the circle line rogue train was caught with data',
 681.0: 'real-time sentiment analysis of twitter hashtags with spark (+ pixiedust)',
 682.0: 'easy json loading and social sharing in dsx notebooks',
 684.0: 'flexdashboard: interactive dashboards for r',
 686.0: 'score a predictive model built with ibm spss modeler, wml & dsx',
 692.0: '15 page tutorial for r',
 693.0: 'better together: spss and data science experience',
 695.0: 'excel files: loading from object storage — python',
 701.0: 'missing data conundrum: exploration and imputation techniques',
 705.0: 'word2vec in data products',
 708.0: 'load and analyze public data sets in dsx',
 714.0: 'a survey of books about apache spark™',
 715.0: "for ai to get creative, it must learn the rules--then how to break 'em",
 720.0: 'data visualization playbook: telling the data story',
 721.0: 'the power of machine learning in spark',
 722.0: 'visual information theory ',
 723.0: '10 essential algorithms for machine learning engineers',
 724.0: 'nips 2016 — day 2 highlights',
 725.0: 'this week in data science (march 7, 2017)',
 727.0: 'from python nested lists to multidimensional numpy arrays',
 729.0: 'pixiedust 1.0 is here! – ibm watson data lab',
 730.0: 'developing for the ibm streaming analytics service',
 732.0: 'rapidly build machine learning flows with dsx',
 735.0: 'making sense of the bias / variance trade-off in (deep) reinforcement learning',
 740.0: '10 pieces of advice to beginner data scientists',
 744.0: 'spark-based machine learning tools for capturing word meanings',
 749.0: 'hurricane how-to',
 751.0: 'build a predictive analytic model',
 757.0: 'working with on-premises databases — step by step',
 758.0: 'a glimpse inside the mind of a data scientist',
 759.0: 'are your predictive models like broken clocks?',
 760.0: 'seti data, publicly available, from ibm',
 761.0: 'variational auto-encoder for "frey faces" using keras',
 763.0: 'load data into rstudio for analysis in dsx',
 764.0: 'tidy data in python',
 766.0: 'making data science a team sport',
 768.0: 'python if statements explained (python for data science basics #4)',
 778.0: 'governance overview for ibm data catalog',
 781.0: 'empirical bayes for multiple sample sizes',
 782.0: 'effectively using\xa0matplotlib',
 784.0: '10 data science, machine learning and ai podcasts you must listen to',
 785.0: 'interactive time series with dygraphs',
 788.0: 'quick guide to build a recommendation engine in python',
 793.0: '10 powerful features on watson data platform, no coding necessary',
 795.0: '7292    a dramatic tour through python’s data visualiz...\nName: title, dtype: object',
 800.0: 'machine learning for the enterprise',
 805.0: 'machine learning for everyone',
 809.0: 'use the machine learning library',
 812.0: 'machine learning exercises in python, part 1',
 813.0: 'generative adversarial networks (gans)',
 821.0: 'using rstudio in ibm data science experience',
 825.0: 'what is smote in an imbalanced class setting (e.g. fraud detection)?',
 833.0: 'machine learning and the science of choosing',
 843.0: 'aspiring data scientists! start to learn statistics with these 6 books!',
 844.0: 'use the cloudant-spark connector in python notebook',
 846.0: 'pearson correlation aggregation on sparksql',
 853.0: 'best practices for custom models in watson visual recognition',
 855.0: 'enjoy python 3.5 in jupyter notebooks',
 857.0: 'r markdown reference guide',
 858.0: 'analyze starcraft ii replays with jupyter notebooks',
 861.0: 'cleaning the swamp: turn your data lake into a source of crystal-clear insight',
 862.0: 'time series analysis using max/min and neuroscience',
 864.0: 'this week in data science (february 21, 2017)',
 865.0: 'analyze traffic data from the city of san francisco',
 868.0: 'how to write the first for loop in r',
 870.0: 'stacking multiple custom models in watson visual recognition',
 871.0: 'overfitting in machine learning: what it is and how to prevent it',
 876.0: 'statistical bias types explained',
 878.0: '10 data science podcasts you need to be listening to right now',
 880.0: 'probabilistic graphical models tutorial\u200a—\u200apart 1 – stats and bots',
 881.0: 'web picks (week of 2 october 2017)',
 882.0: 'blogging with brunel',
 884.0: 'don’t overlook simpler techniques and algorithms',
 887.0: '502    forgetting the past to learn the future: long ...\nName: title, dtype: object',
 891.0: 'interactive web apps with shiny cheat sheet',
 892.0: 'breaking the 80/20 rule: how data catalogs transform data scientists’ productivity',
 896.0: 'a guide to convolution arithmetic for deep learning',
 898.0: 'neural language modeling from scratch (part 1)',
 903.0: 'an attempt to understand boosting algorithm(s)',
 905.0: 'the random forest algorithm ',
 906.0: 'jupyter (ipython) notebooks features',
 910.0: 'working with ibm cloud object storage in python',
 911.0: 'using machine learning to predict baseball injuries',
 919.0: 'watson speech-to-text services — tl;dr need not apply',
 926.0: 'talent vs luck: the role of randomness in success and failure',
 928.0: 'time series anomaly detection algorithms – stats and bots',
 930.0: 'how to use version control (github) in rstudio within dsx?',
 932.0: 'pseudo-labeling a simple semi-supervised learning method',
 933.0: 'workflow in r',
 935.0: 'making data cleaning simple with the sparkling.data library',
 936.0: 'unstructured and structured data versus repetitive and non-repetitive',
 939.0: 'deep learning from scratch i: computational graphs',
 940.0: 'a new version of dt (0.2) on cran',
 941.0: 'a fast on-disk format for data frames for r and python, powered by apache arrow',
 943.0: 'discover hidden facebook usage insights',
 947.0: 'big data is better data',
 948.0: 'what is systemml? why is it relevant to you?',
 949.0: 'apache spark sql analyzer resolves order-by column',
 951.0: 'shiny 0.12: interactive plots with ggplot2',
 952.0: 'why even a moth’s brain is smarter than an ai',
 955.0: 'leaflet: interactive web maps with r',
 957.0: 'brunel interactive visualizations in jupyter notebooks',
 958.0: 'using dsx notebooks to analyze github data',
 959.0: 'understanding empirical bayes estimation (using baseball statistics)',
 961.0: 'beyond parallelize and collect',
 962.0: 'data visualization with r: scrum metrics',
 965.0: 'data visualization playbook: revisiting the basics',
 967.0: 'ml algorithm != learning machine',
 968.0: 'shiny 0.13.0',
 969.0: 'flightpredict ii: the sequel  – ibm watson data lab',
 972.0: 'create a project in dsx',
 973.0: 'recent trends in recommender systems',
 974.0: 'this week in data science (november 22, 2016)',
 975.0: 'the data science process',
 977.0: 'apache spark as the new engine of genomics',
 981.0: 'super fast string matching in python',
 984.0: 'the data processing inequality',
 985.0: 'a day in the life of a data engineer',
 986.0: 'r for data science',
 990.0: 'this week in data science (january 10, 2017)',
 993.0: 'configuring the apache spark sql context',
 996.0: '5 practical use cases of social network analytics: going beyond facebook and twitter',
 997.0: 'apache spark: upgrade and speed-up your analytics',
 1000.0: 'recommender systems: approaches & algorithms',
 1004.0: 'how to get a job in deep learning',
 1006.0: 'essentials of machine learning algorithms (with python and r codes)',
 1008.0: "2875    hugo larochelle's neural network & deep learni...\nName: title, dtype: object",
 1014.0: '1448    i ranked every intro to data science course on...\nName: title, dtype: object',
 1015.0: 'enhanced color mapping',
 1016.0: 'why you should master r (even if it might eventually become obsolete)',
 1017.0: 'the pandas data analysis library',
 1018.0: '7 types of job profiles that makes you a data scientist',
 1024.0: 'using deep learning to reconstruct high-resolution audio',
 1025.0: 'data tidying in data science experience',
 1028.0: 'working with sqlite databases using python and pandas',
 1030.0: 'laplace noising versus simulated out of sample methods (cross frames)',
 1035.0: 'machine learning for the enterprise.',
 1038.0: 'reducing overplotting in scatterplots',
 1042.0: 'use ibm data science experience to read and write data stored on amazon s3',
 1043.0: 'use iot data in streams designer for billing and alerts',
 1044.0: 'mapping points with folium',
 1047.0: 'a comparison of logistic regression and naive bayes ',
 1048.0: '1357    what i learned implementing a classifier from ...\nName: title, dtype: object',
 1050.0: 'jupyter notebooks with scala, python, or r kernels',
 1051.0: 'a tensorflow regression model to predict house values',
 1052.0: 'access db2 warehouse on cloud and db2 with python',
 1053.0: 'access mysql with python',
 1054.0: 'access mysql with r',
 1055.0: 'access postgresql with python',
 1056.0: 'access postgresql with r',
 1057.0: 'adolescent fertility rate (births per 1,000 women ages 15-19), worldwide',
 1058.0: 'agriculture, value added (% of gdp) by country',
 1059.0: 'airbnb data for analytics: amsterdam calendar',
 1060.0: 'airbnb data for analytics: amsterdam listings',
 1061.0: 'airbnb data for analytics: amsterdam reviews',
 1062.0: 'airbnb data for analytics: antwerp calendar',
 1063.0: 'airbnb data for analytics: antwerp listings',
 1064.0: 'airbnb data for analytics: antwerp listings test',
 1065.0: 'airbnb data for analytics: antwerp reviews',
 1066.0: 'airbnb data for analytics: athens calendar',
 1067.0: 'airbnb data for analytics: athens listings',
 1068.0: 'airbnb data for analytics: athens reviews',
 1069.0: 'airbnb data for analytics: austin calendar',
 1070.0: 'airbnb data for analytics: austin listings',
 1071.0: 'airbnb data for analytics: austin reviews',
 1072.0: 'airbnb data for analytics: barcelona calendar',
 1073.0: 'airbnb data for analytics: barcelona listings',
 1074.0: 'airbnb data for analytics: barcelona reviews',
 1075.0: 'airbnb data for analytics: berlin calendar',
 1077.0: 'airbnb data for analytics: berlin reviews',
 1078.0: 'airbnb data for analytics: boston calendar',
 1079.0: 'airbnb data for analytics: boston listings',
 1080.0: 'airbnb data for analytics: boston reviews',
 1083.0: 'airbnb data for analytics: brussels reviews',
 1084.0: 'airbnb data for analytics: chicago calendar',
 1085.0: 'airbnb data for analytics: chicago listings',
 1086.0: 'airbnb data for analytics: chicago reviews',
 1089.0: 'airbnb data for analytics: dublin reviews',
 1091.0: 'airbnb data for analytics: london listings',
 1092.0: 'airbnb data for analytics: london reviews',
 1097.0: 'airbnb data for analytics: madrid listings',
 1101.0: 'airbnb data for analytics: mallorca reviews',
 1106.0: 'airbnb data for analytics: montreal listings',
 1108.0: 'airbnb data for analytics: nashville calendar',
 1112.0: 'airbnb data for analytics: new orleans listings',
 1113.0: 'airbnb data for analytics: new orleans reviews',
 1114.0: 'airbnb data for analytics: new york city calendar',
 1116.0: 'airbnb data for analytics: new york city reviews',
 1119.0: 'airbnb data for analytics: oakland reviews',
 1120.0: 'airbnb data for analytics: paris calendar',
 1121.0: 'airbnb data for analytics: paris listings',
 1122.0: 'airbnb data for analytics: paris reviews',
 1123.0: 'airbnb data for analytics: portland calendar',
 1124.0: 'airbnb data for analytics: portland listings',
 1125.0: 'airbnb data for analytics: portland reviews',
 1127.0: 'airbnb data for analytics: san diego listings',
 1128.0: 'airbnb data for analytics: san diego reviews',
 1130.0: 'airbnb data for analytics: san francisco listings',
 1134.0: 'airbnb data for analytics: santa cruz county reviews',
 1135.0: 'airbnb data for analytics: seattle calendar',
 1137.0: 'airbnb data for analytics: seattle reviews',
 1138.0: 'airbnb data for analytics: sydney calendar',
 1139.0: 'airbnb data for analytics: sydney listings',
 1140.0: 'airbnb data for analytics: sydney reviews',
 1141.0: 'airbnb data for analytics: toronto calendar',
 1142.0: 'airbnb data for analytics: toronto listings',
 1143.0: 'airbnb data for analytics: toronto reviews',
 1144.0: 'airbnb data for analytics: trentino calendar',
 1145.0: 'airbnb data for analytics: trentino listings',
 1146.0: 'airbnb data for analytics: trentino reviews',
 1147.0: 'airbnb data for analytics: vancouver calendar',
 1148.0: 'airbnb data for analytics: vancouver listings',
 1149.0: 'airbnb data for analytics: vancouver reviews',
 1150.0: 'airbnb data for analytics: venice calendar',
 1151.0: 'airbnb data for analytics: venice listings',
 1152.0: 'airbnb data for analytics: venice reviews',
 1153.0: 'airbnb data for analytics: vienna calendar',
 1154.0: 'airbnb data for analytics: vienna listings',
 1155.0: 'airbnb data for analytics: vienna reviews',
 1156.0: 'airbnb data for analytics: washington d.c. calendar',
 1157.0: 'airbnb data for analytics: washington d.c. listings',
 1158.0: 'airbnb data for analytics: washington d.c. reviews',
 1159.0: 'analyze facebook data using ibm watson and watson studio',
 1160.0: 'analyze accident reports on amazon emr spark',
 1161.0: 'analyze data, build a dashboard with spark and pixiedust',
 1162.0: 'analyze energy consumption in buildings',
 1163.0: 'analyze open data sets with spark & pixiedust',
 1164.0: 'analyze open data sets with pandas dataframes',
 1165.0: 'analyze precipitation data',
 1166.0: 'analyzing data by using the sparkling.data library features',
 1167.0: 'annual % inflation by country',
 1168.0: 'annual % population growth by country',
 1169.0: 'annual precipitation by country 1990-2009',
 1170.0: 'apache spark lab, part 1: basic concepts',
 1171.0: 'apache spark lab, part 2: querying data',
 1172.0: 'apache spark lab, part 3: machine learning',
 1173.0: 'births attended by skilled health staff (% of total) by country',
 1174.0: 'breast cancer wisconsin (diagnostic) data set',
 1175.0: 'breast cancer detection with xgboost, wml and scikit',
 1176.0: 'build a python app on the streaming analytics service',
 1177.0: 'cifar-10 - python version',
 1178.0: 'cifar-100 - python version',
 1179.0: 'co2 emissions (metric tons per capita) by country',
 1180.0: 'calls by customers of a telco company',
 1181.0: 'car performance data',
 1183.0: 'categorize urban density',
 1184.0: 'city population by sex, city and city type',
 1185.0: 'classify tumors with machine learning',
 1186.0: 'connect to db2 warehouse on cloud and db2 using scala',
 1187.0: 'consumer prices',
 1188.0: 'consumption of ozone-depleting cfcs in odp metric tons',
 1189.0: 'contraceptive prevalence (% women 15-49) by country',
 1190.0: 'country population by gender 1985-2005',
 1191.0: 'country statistics - europe - population and society',
 1192.0: 'country statistics: airports',
 1195.0: 'country statistics: budget surplus or deficit',
 1196.0: 'country statistics: central bank discount rate',
 1197.0: 'country statistics: children under the age of 5 years underweight',
 1198.0: 'country statistics: commercial bank prime lending rate',
 1199.0: 'country statistics: crude oil - exports',
 1200.0: 'country statistics: crude oil - imports',
 1202.0: 'country statistics: crude oil - proved reserves',
 1203.0: 'country statistics: current account balance',
 1206.0: 'country statistics: distribution of family income - gini index',
 1208.0: 'country statistics: electricity - consumption',
 1210.0: 'country statistics: electricity - from fossil fuels',
 1219.0: 'country statistics: gdp - per capita (ppp)',
 1221.0: 'country statistics: gross national saving',
 1225.0: 'country statistics: health expenditures',
 1226.0: 'country statistics: imports',
 1227.0: 'country statistics: industrial production growth rate',
 1228.0: 'country statistics: infant mortality rate',
 1230.0: 'country statistics: internet users',
 1232.0: 'country statistics: life expectancy at birth',
 1233.0: 'country statistics: market value of publicly traded shares',
 1234.0: 'country statistics: maternal mortality rate',
 1235.0: 'country statistics: merchant marine',
 1237.0: 'country statistics: natural gas - consumption',
 1244.0: 'country statistics: population',
 1247.0: 'country statistics: railways',
 1251.0: 'country statistics: refined petroleum products - production',
 1252.0: 'country statistics: reserves of foreign exchange and gold',
 1253.0: 'country statistics: roadways',
 1254.0: 'country statistics: stock of broad money',
 1257.0: 'country statistics: stock of domestic credit',
 1260.0: 'country statistics: telephones - fixed lines',
 1261.0: 'country statistics: telephones - mobile cellular',
 1263.0: 'country statistics: unemployment rate',
 1266.0: 'country surface area (sq. km)',
 1267.0: 'country populations 15 years of age and over, by educational attainment, age and sex',
 1271.0: 'customer demographics and sales',
 1273.0: 'customers of a telco including services used',
 1274.0: 'data model with streaming analytics and python',
 1276.0: 'deploy your python model as a restful api',
 1277.0: '54174    detect potentially malfunctioning sensors in r...\nName: title, dtype: object',
 1278.0: 'develop a scala spark model on chicago building violations',
 1279.0: 'dry bulb temperature, by country, station and year',
 1280.0: 'education (2015): united states demographic measures',
 1281.0: 'electric power consumption (kwh per capita) by country',
 1282.0: 'employed population by occupation and age',
 1283.0: 'energy use (kg of oil equivalent per capita) by country',
 1285.0: 'environment statistics database - waste',
 1286.0: 'environment statistics database - water',
 1289.0: 'external debt stocks, total (dod, current us$) by country',
 1290.0: 'fashion-mnist',
 1291.0: 'fertility rate by country in total births per woman',
 1292.0: 'find airbnb deals in portland with machine learning using r',
 1293.0: 'finding optimal locations of new store using decision optimization',
 1294.0: 'foreign direct investment, net inflows (bop, current us$) by country',
 1295.0: 'forest area by country in sq km',
 1296.0: 'fortune 100 companies',
 1297.0: 'from local spark mllib model to cloud with watson machine learning',
 1298.0: 'from scikit-learn model to cloud with wml client',
 1299.0: 'from spark ml model to online scoring with scala',
 1303.0: 'geographic coordinates of world locations',
 1304.0: 'gosales transactions for logistic regression model',
 1305.0: 'gosales transactions for naive bayes model',
 1306.0: 'government consumption expenditure',
 1307.0: 'greenhouse gas emissions worldwide',
 1308.0: 'gross national income per capita, atlas method (current us$) by country',
 1313.0: 'health insurance (2015): united states demographic measures',
 1314.0: 'healthcare python streaming application demo',
 1315.0: 'high-tech exports as % of manufactured exports by country',
 1317.0: 'house building with worker skills',
 1318.0: 'household consumption expenditure',
 1319.0: 'households by type of household, age and sex of head of household',
 1320.0: 'housing (2015): united states demographic measures',
 1321.0: 'ibm cloud sql query',
 1324.0: 'ibm watson facebook posts for 2015',
 1326.0: 'improved water source by country: % population with access',
 1328.0: 'income (2015): united states demographic measures',
 1329.0: 'ingest data from message hub in a streams flow',
 1330.0: 'insights from new york car accident reports',
 1331.0: 'intentional homicide, number and rate per 100,000 population, by country',
 1332.0: 'intents & examples for ibm watson conversation',
 1333.0: 'interest rates',
 1334.0: 'international liquidity',
 1335.0: 'labor',
 1336.0: 'learn basics about notebooks and apache spark',
 1337.0: 'life expectancy at birth by country in total years',
 1338.0: 'ml optimization using cognitive assistant',
 1340.0: 'marital status of men and women',
 1343.0: 'maximize oil company profits',
 1344.0: 'measles immunization % children 12-23 months by country',
 1346.0: 'military expenditure as % of gdp by country',
 1348.0: 'mobile cellular subscriptions per 100 people by country',
 1349.0: 'mobile-cellular telephone subscriptions per 100 inhabitants, worldwide',
 1350.0: 'model a golomb ruler',
 1351.0: 'model bike sharing data with spss',
 1354.0: 'movie recommender system with spark machine learning',
 1355.0: 'natural gas production, 1995 - 2012, worldwide',
 1356.0: 'occupation (2015): united states demographic measures',
 1357.0: 'overlapping co-cluster recommendation algorithm (ocular)',
 1358.0: 'part-time employment rate, worldwide, by country and year',
 1359.0: 'percentage of internet users by country',
 1360.0: 'pixieapp for outlier detection',
 1361.0: 'population below national poverty line, total, percentage',
 1362.0: 'poverty (2015): united states demographic measures',
 1363.0: 'predict loan applicant behavior with tensorflow neural networking',
 1364.0: 'predicting churn with the spss random tree algorithm',
 1365.0: 'primary school completion rate % of relevant age group by country',
 1366.0: 'process events from the watson iot platform in a streams python application',
 1367.0: 'programmatic evaluation using watson conversation',
 1368.0: 'putting a human face on machine learning',
 1369.0: 'ratio (% of population) at national poverty line by country',
 1371.0: 'refugees',
 1372.0: 'refugees, worldwide, 2003 - 2013',
 1377.0: 'roads paved as % of total roads by country',
 1378.0: 'roads, paved (% of total roads), worldwide, 1990-2011',
 1386.0: 'small steps to tensorflow',
 1387.0: 'social media insights with watson developer cloud & watson studio',
 1390.0: 'style transfer experiments with watson machine learning',
 1391.0: 'sudoku',
 1393.0: 'the nurse assignment problem',
 1394.0: 'the nurse assignment problem data',
 1395.0: 'the unit commitment problem',
 1396.0: 'times world university ranking analysis',
 1397.0: 'total employment, by economic activity (thousands)',
 1398.0: 'total population by country',
 1400.0: 'uci ml repository: chronic kidney disease data set',
 1401.0: 'uci: abalone',
 1402.0: 'uci: adult - predict income',
 1403.0: 'uci: car evaluation',
 1404.0: 'uci: forest fires',
 1405.0: 'uci: heart disease - cleveland',
 1406.0: 'uci: iris',
 1407.0: 'uci: poker hand - testing data set',
 1408.0: 'uci: poker hand - training data set',
 1409.0: 'uci: red wine quality',
 1410.0: 'uci: sms spam collection',
 1411.0: 'uci: white wine quality',
 1412.0: 'uci: wine recognition',
 1414.0: 'united states demographic measures: education',
 1415.0: 'united states demographic measures: income',
 1416.0: 'united states demographic measures: population and age',
 1418.0: 'united states demographic measures: zip code tabulation areas (zctas)',
 1419.0: 'unmet need for family planning, spacing, percentage, worldwide, by country',
 1420.0: 'use apache systemml and spark for machine learning',
 1421.0: 'use pmml to predict iris species',
 1422.0: 'use r dataframes & ibm watson natural language understanding',
 1423.0: 'use sql with data in hadoop python',
 1424.0: 'use spark for python to load data and run sql queries',
 1425.0: 'use spark for r to load data and run sql queries',
 1426.0: 'use spark for scala to load data and run sql queries',
 1427.0: 'use xgboost, scikit-learn & ibm watson machine learning apis',
 1428.0: 'use decision optimization to schedule league games',
 1429.0: 'use deep learning for image classification',
 1430.0: 'using pixiedust for fast, flexible, and easier data analysis and experimentation',
 1431.0: 'visualize car data with brunel',
 1432.0: 'visualize data with the matplotlib library',
 1433.0: 'visualize the 1854 london cholera outbreak',
 1434.0: 'wages',
 1435.0: 'watson assistant workspace analysis with user logs',
 1436.0: 'welcome to pixiedust',
 1437.0: 'what caused the challenger disaster?',
 1439.0: 'working with ibm cloud object storage in r',
 1440.0: 'world marriage data',
 1441.0: 'world tourism data by the world tourism organization',
 1442.0: 'worldwide county and region - national accounts - gross national income 1948-2010',
 1443.0: 'worldwide electricity demand and production 1990-2012',
 1444.0: 'worldwide fuel oil consumption by household (in 1000 metric tons)'}
